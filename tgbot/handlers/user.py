import logging
from datetime import datetime

from aiogram import Bot, Dispatcher, F, Router, types
from aiogram.exceptions import TelegramAPIError, TelegramForbiddenError
from aiogram.filters import Command, CommandObject, CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import CallbackQuery, FSInputFile, Message
from dotenv import load_dotenv

from tgbot.keyboards.inline import (admin_panel, first_start_keyboard,
                                    to_payment)
from tgbot.services.connect_table import (connect_to_google_sheets, parse_date,
                                          schedule_daily_check)

load_dotenv()

user_router = Router()

dp = Dispatcher()


class BroadcastStates(StatesGroup):
    waiting_for_message = State()


class SendMessageStates(StatesGroup):
    waiting_for_user_id = State()
    waiting_for_message = State()


@user_router.message(CommandStart())
async def user_start(message: Message, command: CommandObject):
    try:
        await message.delete()
    except TelegramAPIError as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    user_id = message.from_user.id
    username = message.from_user.username or ""
    args = command.args
    referrer_id = None
    if args and args.startswith("ref_"):
        try:
            referrer_id = int(args.replace("ref_", ""))
        except ValueError:
            referrer_id = None

    sheet = connect_to_google_sheets()
    records = sheet.get_all_records()
    user_row = None
    for i, record in enumerate(records):
        if str(record.get("user_id")) == str(user_id):
            user_row = i + 2
            break
    if user_row:
        sheet.update_cell(user_row, 2, username)
        if referrer_id and not records[user_row - 2].get("referrer_id"):
            sheet.update_cell(user_row, 6, referrer_id)
    else:
        sheet.append_row(
            [user_id, username, "", "", "", "", "", "", "", referrer_id, 0]
        )
    print(f"üåÄ –ù–æ–≤—ã–π –∑–∞–ø—É—Å–∫: user_id={user_id}, referrer_id={referrer_id}")

    video_path = "/root/vpnbot/TestNew/Files/1.mp4"
    video = FSInputFile(video_path)
    await message.answer_video(
        video=video,
        caption=(
            "üî• –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ BlackGate üî•\n"
            "–ó–∞–±—É–¥—å—Ç–µ –ø—Ä–æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏. –¢–µ–ø–µ—Ä—å –≤—Å—ë —Ä–∞–±–æ—Ç–∞–µ—Ç ‚Äî –≤—Å–µ–≥–¥–∞ –∏ –≤–µ–∑–¥–µ.\n"
            "–ß—Ç–æ —É–º–µ–µ—Ç BlackGate:\n"
            " üí≥  –í—Å–µ –±–∞–Ω–∫–∏ –æ—Ç–∫—Ä—ã–≤–∞—é—Ç—Å—è –∫–∞–∫ —á–∞—Å—ã\n"
            " üì∫  YouTube –∏ —Å—Ç—Ä–∏–º—ã ‚Äî –±–µ–∑ —Ç–æ—Ä–º–æ–∑–æ–≤, —Ä–µ–∫–ª–∞–º—ã –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π\n"
            " üßæ  –ì–æ—Å—É—Å–ª—É–≥–∏? –ë–µ–∑ –ø—Ä–æ–±–ª–µ–º\n"
            " üòÆ  –ù–∏–∫–∞–∫–∏—Ö —Ä—É—á–Ω—ã—Ö –≤–∫–ª—é—á–µ–Ω–∏–π ‚Äî —Ä–∞–±–æ—Ç–∞–µ—Ç —Ñ–æ–Ω–æ–º 24/7\n"
            " ‚ùóÔ∏è –ù–µ–≤–∞–∂–Ω–æ –≥–¥–µ –≤—ã ‚Äî –∏–Ω—Ç–µ—Ä–Ω–µ—Ç –≤—Å–µ–≥–¥–∞ –∫–∞–∫ –¥–æ–º–∞"
        ),
        reply_markup=first_start_keyboard(),
    )


@user_router.message(Command("admin_panel"))
async def admin_panel_handler(message: types.Message):
    if message.from_user.id != 7792300158:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    await message.answer(
        "–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∞",
        reply_markup=admin_panel()
    )


@user_router.callback_query(F.data == "send_all")
async def send_all(call: types.CallbackQuery, state: FSMContext):
    if call.from_user.id != 7792300158:
        await call.message.edit_text("–í—ã –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä")
        return
    await call.message.edit_text("–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:")
    await state.set_state(BroadcastStates.waiting_for_message)


@user_router.message(BroadcastStates.waiting_for_message)
async def process_broadcast_message(
    message: types.Message, state: FSMContext, bot: Bot
):
    text = message.text
    sheet = connect_to_google_sheets()
    users = sheet.get_all_records()
    count = 0
    for record in users:
        user_id = record.get("user_id")
        if user_id:
            try:
                await bot.send_message(int(user_id), text)
                count += 1
            except TelegramAPIError as e:
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å {user_id}: {e}")
    await message.answer("‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
    await state.clear()


@user_router.callback_query(F.data == "to_check")
async def o_daily_check(call: CallbackQuery, bot: Bot):
    await call.answer()  # –£–±–∏—Ä–∞–µ–º "—á–∞—Å–∏–∫–∏"
    await call.message.answer(
        "üìÖ –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫..."
    )
    schedule_daily_check(bot)
    await call.message.answer("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫ –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–∞.")


@user_router.callback_query(F.data == "send_user")
async def send_message_to_user_handler(call: CallbackQuery, state: FSMContext):
    await call.answer()
    await call.message.answer(
        "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è," " –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ:"
    )
    await state.set_state(SendMessageStates.waiting_for_user_id)


@user_router.message(SendMessageStates.waiting_for_user_id)
async def process_user_id(message: types.Message, state: FSMContext):
    user_id = message.text.strip()
    if not user_id.isdigit():
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π user_id (—á–∏—Å–ª–æ).")
        return
    await state.update_data(user_id=user_id)
    await message.answer(f"–ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å ID {user_id}:")
    await state.set_state(SendMessageStates.waiting_for_message)


@user_router.message(SendMessageStates.waiting_for_message)
async def process_message_text(
    message: types.Message, state: FSMContext, bot: Bot
):
    user_data = await state.get_data()
    user_id = user_data.get("user_id")
    text = message.text
    try:
        await bot.send_message(user_id, text)
        await message.answer("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    await state.clear()


@user_router.callback_query(F.data == "our_reff_link")
async def get_reff_link(call: CallbackQuery, bot: Bot):
    user_id = call.from_user.id
    sheet = connect_to_google_sheets()
    records = sheet.get_all_records()
    user_record = next(
        (r for r in records if str(r.get("user_id")) == str(user_id)), None
    )
    if user_record:
        end_date_str = user_record.get("end_date")
        end_date = parse_date(end_date_str)
        if end_date and end_date >= datetime.today().date():
            ref_link = (
                f"https://t.me/mainfuckinghelper_bot?start=ref_{user_id}"
            )
            await bot.send_message(
                user_id,
                f"üîó –¢–≤–æ—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n{ref_link}\n\n"
                f"üß† –ó–∞ –∫–∞–∂–¥—É—é –ø–æ–∫—É–ø–∫—É –ø–æ —Å—Å—ã–ª–∫–µ  +5 –¥–Ω–µ–π –∫ —Ç–≤–æ–µ–π –ø–æ–¥–ø–∏—Å–∫–µ!",
            )
        else:
            await bot.send_message(
                user_id,
                "‚ö†Ô∏è –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ "
                "—Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–µ.\n",
            )
    else:
        await bot.send_message(user_id, "üòî –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏.")


async def send_payment_notification(bot: Bot, user_id: int):
    await bot.send_message(
        user_id,
        "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, —Å–µ–≥–æ–¥–Ω—è –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ VPNüñ§",
        reply_markup=to_payment(),
    )


async def check_expiration_dates(bot: Bot):
    try:
        sheet = connect_to_google_sheets()
        records = sheet.get_all_records()
        today = datetime.today().date()
        logging.info(f"üìÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫ –Ω–∞ {today}")
        admin_id = "ADMIN_ID"
        for record in records:
            user_id = record.get("user_id")
            if not user_id:
                continue
            end_date = record.get("end_date")
            if end_date and parse_date(end_date) == today:
                try:
                    await send_payment_notification(bot, int(user_id))
                    logging.info(f"‚úÖ–û–∫–æ–Ω—á–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ {user_id}")
                except TelegramForbiddenError:
                    logging.warning(f"üö´ –ë–æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω —É {user_id}")

            trial_end = record.get("end_trial_period")
            if trial_end and parse_date(trial_end) == today:
                try:
                    await bot.send_message(
                        int(user_id),
                        "‚ö†Ô∏è –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ,—Å–µ–≥–æ–¥–Ω—è –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥."
                        " –ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è VPN,"
                        " –æ–ø–ª–∞—Ç–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É.",
                        reply_markup=to_payment(),
                    )
                    await bot.send_message(
                        admin_id,
                        f"üìõ –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}"
                        f" –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥.",
                    )
                    logging.info(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: –æ–∫–æ–Ω—á–∞–Ω–∏–µ  {user_id}")
                except TelegramForbiddenError:
                    logging.warning(f"üö´ –ë–æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω —É {user_id}")
    except Exception as e:
        logging.exception(f"üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–æ–∫: {e}")
